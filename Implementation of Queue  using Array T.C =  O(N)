#include <bits/stdc++.h>
using namespace std;

// For the array storage the capacity = O(N), variable takes O(1)
// Space complexity = O(N);

// Time complexity of all operation is O(1) except dequeu, result  is takes O(N) in the worst case , shift all the element .
// Time complexity O(N)

class Queue {
    int size = 0;
    int cap, *arr;

public:
    
    Queue(int c) {
        cap = c;
        arr = new int[c];
        size = 0;
    }

    // CHECK IF THE QUEUE IS EMPTY OR NOT
    bool isEmpty() {
        return (size == 0);
    }

    // CHECK IF THE QUEUE IS FULL OR NOT
    bool isFull() {
        return (cap == size);
    }


    // GET THE FRONT ELEMENT OF THE QUEUE
    int front() {
        if (isEmpty()) {
            return -1;
        } else {
            return arr[0];
        }
    }


    // GET THE REAR ELEMENT OF THE QUEUE
    int rear() {
        if (isEmpty()) {
            return -1;
        } else {
            return arr[size - 1];
        }
    }


    // ENQUEUE FUNCTION TO ADD AN ELEMENT TO THE QUEUE
    void enqueu(int x) {
        if (isFull()) {
            cout << "Queue is full\n";
            return;
        } else {
            arr[size] = x;
            size++;
        }
    }

    // Dequeue function to remove an element from the queue
    void dequeu() {
        if (isEmpty()) {
            cout << "Queue is empty\n";
            return;
        }
        for (int i = 0; i < size - 1; i++) {
            arr[i] = arr[i + 1];
        }
        size--;
    }

    // Function to display all elements in the queue
    void result() {
        if (isEmpty()) {
            cout << "Queue is empty\n";
            return;
        }
        cout << "Queue elements: ";
        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Queue q(5); //  capacity is 5
    q.enqueu(12);
    q.enqueu(34);
    q.dequeu();
    q.enqueu(21);
    cout<<"Front element of the queue is : "<<q.front()<<endl;
    q.enqueu(78);
    q.result(); 
    q.dequeu();
    cout<<"Rear element of the queue is : "<<q.rear()<<endl;
    q.result();
    return 0;
}
